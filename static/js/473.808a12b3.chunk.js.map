{"version":3,"file":"static/js/473.808a12b3.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/services.js","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { ErrorMessage, Field, Form } from 'formik';\n\nexport const ContactFormWrap = styled(Form)`\n  width: 500px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  font-size: 24px;\n  border: 3px solid white;\n  padding: 30px;\n  margin: 30px auto;\n`;\nexport const ContactText = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  font-size: 24px;\n  font-weight: 500;\n  color: rgb(85, 26, 139);\n`;\n\nexport const ContactInput = styled(Field)`\n  height: 40px;\n  border-radius: 15px;\n  font-size: 30px;\n  color: blueviolet;\n  padding: 5px;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  font-size: 24px;\n  width: fit-content;\n  color: red;\n`;\n\nexport const ContactFormButton = styled.button`\n  font-size: 24px;\n  color: white;\n  border-radius: 15px;\n  background: linear-gradient(160deg, #ed8bf8, #6d0462);\n  padding: 10px;\n  cursor: pointer;\n  transition: 250ms box-shadow ease-out, 250ms color ease-in;\n  :hover {\n    color: #f8f856;\n    box-shadow: 1px 3px 2px blanchedalmond, -1px -3px 5px #ed8bf8;\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport 'yup-phone';\nimport {\n  ContactFormWrap,\n  ContactFormButton,\n  ContactInput,\n  ContactText,\n  Error,\n} from './ContactForm.styled';\nimport toast from 'react-hot-toast';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { checkContact, checkNumber } from 'components/services';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .required()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: yup.string().phone().required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (checkContact(contacts, values)) {\n      toast(`${values.name} already exists`, {\n        position: 'top-right',\n        style: {\n          borderRadius: '10px',\n          background: '#fff',\n          color: '#ff0000',\n        },\n      });\n      return;\n    }\n    if (checkNumber(contacts, values)) {\n      toast(`${values.number} already exists`, {\n        position: 'top-right',\n        style: {\n          borderRadius: '10px',\n          background: '#fff',\n          color: '#ff0000',\n        },\n      });\n      return;\n    }\n    console.log(values);\n    dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <ContactFormWrap autoComplete=\"off\">\n        <ContactText htmlFor=\"name\">\n          Name\n          <ContactInput type=\"text\" name=\"name\" />\n          <Error name=\"name\" component=\"div\" />\n        </ContactText>\n        <ContactText htmlFor=\"number\">\n          Phone\n          <ContactInput type=\"tel\" name=\"number\" placeholder=\"+380XXXXXXXXX\" />\n          <Error name=\"number\" component=\"div\" />\n        </ContactText>\n        <ContactFormButton type=\"submit\">Add contact</ContactFormButton>\n      </ContactFormWrap>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","export const checkContact = (contacts, values) => {\n  return contacts.find(contact => contact.name === values.name.trim());\n};\nexport const checkNumber = (contacts, values) => {\n  return contacts.find(contact => contact.number === values.number.trim());\n};\n","import styled from '@emotion/styled';\n\nexport const ContactListButton = styled.button`\n  font-size: 24px;\n  color: white;\n  margin-left: auto;\n  border-radius: 15px;\n  border: inherit;\n  background: linear-gradient(160deg, #ed8bf8, #6d0462);\n  padding: 10px;\n  cursor: pointer;\n  transition: 250ms box-shadow ease-out, 250ms color ease-in;\n  :hover {\n    color: #f8f856;\n    box-shadow: 1px 3px 2px blanchedalmond, -1px -3px 5px #ed8bf8;\n  }\n`;\nexport const ContactName = styled.p`\n  color: rgb(85, 26, 139);\n`;\n\nexport const ContactNumber = styled.span`\n  font-weight: 600;\n  color: rgb(85, 26, 139);\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  ContactNumber,\n  ContactListButton,\n  ContactName,\n} from './ContactItem.styled';\nimport PropTypes from 'prop-types';\n\nconst ContactItem = ({ contact: { name, number, id } }) => {\n  const dispatch = useDispatch();\n  const handleDeleteContact = () => dispatch(deleteContact(id));\n\n  return (\n    <>\n      <ContactName>\n        {name}: <ContactNumber>{number}</ContactNumber>\n      </ContactName>\n      <ContactListButton onClick={handleDeleteContact}>\n        Delete\n      </ContactListButton>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default ContactItem;\n","import styled from '@emotion/styled';\n\nexport const ContactsList = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  gap: 10px;\n  list-style: none;\n  border-radius: 15px;\n  margin: 0px auto;\n  padding: 10px;\n`;\n\nexport const ContactItems = styled.li`\n  display: flex;\n  font-size: 30px;\n  font-weight: 500;\n  width: 600px;\n  border: 2px solid yellow;\n  border-radius: 5px;\n  padding: 5px;\n  background: linear-gradient(160deg, #f0ade4, #d108ec);\n`;\n","import ContactItem from 'components/ContactItem';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactsList, ContactItems } from './ContactList.styled';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {visibleContacts.length > 0 && (\n        <ContactsList>\n          {visibleContacts.map(contact => (\n            <ContactItems key={contact.id}>\n              <ContactItem contact={contact} />\n            </ContactItems>\n          ))}\n        </ContactsList>\n      )}\n    </>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const FilterText = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  font-size: 24px;\n  font-weight: 500;\n  color: rgb(85, 26, 139);\n  width: 500px;\n  margin: 30px auto;\n`;\nexport const FilterInput = styled.input`\n  height: 40px;\n  border-radius: 15px;\n  font-size: 30px;\n  color: blueviolet;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setStatusFilter } from 'redux/contacts/filterSlice';\nimport PropTypes from 'prop-types';\nimport { FilterText, FilterInput } from './Filter.styled';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const onChangeFilter = evt => {\n    const value = evt.currentTarget.value.toLowerCase();\n    dispatch(setStatusFilter(value));\n  };\n\n  return (\n    <FilterText>\n      Find contacts by name\n      <FilterInput\n        name=\"filter\"\n        id=\"filter\"\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}\n      />\n    </FilterText>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { Helmet } from 'react-helmet';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <ContactForm />\n      <Filter />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactFormWrap","styled","Form","ContactText","ContactInput","Field","Error","ErrorMessage","ContactFormButton","selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","schema","yup","shape","required","matches","number","phone","initialValues","dispatch","useDispatch","useSelector","onSubmit","values","resetForm","find","trim","checkContact","checkNumber","console","log","addContact","toast","position","style","borderRadius","background","color","validationSchema","autoComplete","htmlFor","type","component","placeholder","ContactListButton","ContactName","ContactNumber","id","onClick","deleteContact","ContactsList","ContactItems","visibleContacts","useEffect","fetchContacts","length","map","FilterText","FilterInput","value","onChange","evt","currentTarget","setStatusFilter","Helmet"],"sourceRoot":""}