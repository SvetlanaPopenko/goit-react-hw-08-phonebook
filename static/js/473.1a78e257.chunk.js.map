{"version":3,"file":"static/js/473.1a78e257.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/services.js","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { ErrorMessage, Field, Form } from 'formik';\n\nexport const ContactFormWrap = styled(Form)`\n  width: 500px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n`;\nexport const ContactText = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const ContactInput = styled(Field)`\n  height: 40px;\n  border-radius: 15px;\n  font-size: 30px;\n  color: blueviolet;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  font-size: 24px;\n  width: fit-content;\n  color: red;\n`;\n\nexport const ContactFormButton = styled.button`\n  font-size: 24px;\n  color: white;\n  border-radius: 15px;\n  border: inherit;\n  background: linear-gradient(160deg, #ed8bf8, #6d0462);\n  padding: 10px;\n  cursor: pointer;\n  transition: 250ms transform ease-in-out, 250ms box-shadow ease-out,\n    250ms color ease-in;\n  :hover {\n    transform: scale(1.05);\n    font-size: 28px;\n    color: #f8f856;\n    box-shadow: 1px 3px 2px blanchedalmond, -1px -3px 5px #ed8bf8;\n  }\n`;\n\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport 'yup-phone';\nimport {\n  ContactFormWrap,\n  ContactFormButton,\n  ContactInput,\n  ContactText,\n  Error,\n} from './ContactForm.styled';\nimport toast from 'react-hot-toast';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { checkContact, checkNumber } from 'components/services';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .required()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  phone: yup.string().phone().required(),\n});\n\nconst initialValues = {\n  name: '',\n  phone: '',\n};\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (checkContact(contacts, values)) {\n      toast(`${values.name} already exists`, {\n        position: 'bottom-center',\n        style: {\n          borderRadius: '10px',\n          background: '#333',\n          color: '#fff',\n        },\n      });\n      return;\n    }\n    if (checkNumber(contacts, values)) {\n      toast(`${values.phone} already exists`, {\n        position: 'bottom-center',\n        style: {\n          borderRadius: '10px',\n          background: '#333',\n          color: '#fff',\n        },\n      });\n      return;\n    }\n\n    dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <ContactFormWrap autoComplete=\"off\">\n        <ContactText htmlFor=\"name\">\n          Name\n          <ContactInput type=\"text\" name=\"name\" />\n          <Error name=\"name\" component=\"div\" />\n        </ContactText>\n        <ContactText htmlFor=\"phone\">\n          Phone\n          <ContactInput type=\"tel\" name=\"phone\" placeholder=\"+380XXXXXXXXX\" />\n          <Error name=\"phone\" component=\"div\" />\n        </ContactText>\n        <ContactFormButton type=\"submit\">Add contact</ContactFormButton>\n      </ContactFormWrap>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","export const checkContact = (contacts, values) => {\n  return contacts.find(contact => contact.name === values.name.trim());\n};\nexport const checkNumber = (contacts, values) => {\n  return contacts.find(contact => contact.phone === values.phone.trim());\n};\n","import styled from '@emotion/styled';\n\nexport const ContactListButton = styled.button`\n  font-size: 24px;\n  color: white;\n  margin-left: auto;\n  border-radius: 23%;\n  border: inherit;\n  background: linear-gradient(160deg, #ed8bf8, #6d0462);\n  padding: 10px;\n  cursor: pointer;\n  transition: 250ms transform ease-in-out, 250ms box-shadow ease-out,\n    250ms color ease-in;\n  :hover {\n    transform: scale(1.05);\n    font-size: 28px;\n    color: #f8f856;\n    box-shadow: 1px 3px 2px blanchedalmond, -1px -3px 5px #ed8bf8;\n  }\n`;\n\nexport const ContactNumber = styled.span`\n  font-weight: 600;\n`;","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ContactNumber, ContactListButton } from './ContactItem.styled';\nimport PropTypes from 'prop-types';\n\nconst ContactItem = ({ contact: { name, phone, id } }) => {\n  const dispatch = useDispatch();\n  const handleDeleteContact = () => dispatch(deleteContact(id));\n\n  return (\n    <>\n      <p>\n        {name}: <ContactNumber>{phone}</ContactNumber>\n      </p>\n      <ContactListButton onClick={handleDeleteContact}>\n        Delete\n      </ContactListButton>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  phone: PropTypes.string,\n};\n\nexport default ContactItem;\n","import styled from '@emotion/styled';\n\nexport const ContactsList = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  gap: 10px;\n  list-style: none;\n  border-radius: 15px;\n  margin: 0px auto;\n  padding: 10px;\n`;\n\nexport const ContactItems = styled.li`\n  display: flex;\n  font-size: 30px;\n  font-weight: 500;\n  width: 600px;\n  border: 2px solid yellow;\n  border-radius: 5px;\n  padding: 10px;\n  background: linear-gradient(160deg, #f0ade4, #d108ec);\n`;\n\n","import ContactItem from 'components/ContactItem';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactsList, ContactItems } from './ContactList.styled';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {visibleContacts.length > 0 && (\n        <ContactsList>\n          {visibleContacts.map(contact => (\n            <ContactItems key={contact.id}>\n              <ContactItem contact={contact} />\n            </ContactItems>\n          ))}\n        </ContactsList>\n      )}\n    </>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const FilterText = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\nexport const FilterInput = styled.input`\n  height: 40px;\n  border-radius: 15px;\n  font-size: 30px;\n  color: blueviolet;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { setStatusFilter } from 'redux/contacts/filterSlice';\nimport PropTypes from 'prop-types';\nimport { FilterText, FilterInput } from './Filter.styled';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const onChangeFilter = evt => {\n    const value = evt.currentTarget.value.toLowerCase();\n    dispatch(setStatusFilter(value));\n  };\n\n  return (\n    <FilterText>\n      Find contacts by name\n      <FilterInput\n        name=\"filter\"\n        id=\"filter\"\n        type=\"text\"\n        value={filter}\n        onChange={onChangeFilter}\n      />\n    </FilterText>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { Helmet } from 'react-helmet';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n        </Helmet>\n      <ContactForm />\n      <Filter/>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactFormWrap","styled","Form","ContactText","ContactInput","Field","Error","ErrorMessage","ContactFormButton","selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","schema","yup","shape","required","matches","phone","initialValues","dispatch","useDispatch","useSelector","onSubmit","values","resetForm","find","trim","checkContact","checkNumber","addContact","toast","position","style","borderRadius","background","color","validationSchema","autoComplete","htmlFor","type","component","placeholder","ContactListButton","ContactNumber","id","onClick","deleteContact","ContactsList","ContactItems","visibleContacts","useEffect","fetchContacts","length","map","FilterText","FilterInput","value","onChange","evt","currentTarget","setStatusFilter","Helmet"],"sourceRoot":""}